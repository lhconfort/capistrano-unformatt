ENV['RAILS_ENV'] = '<%= fetch(:rails_env, 'production') %>'
worker_processes <%= fetch(:app_server_workers, 4) %>

listen "<%="#{fetch(:app_server_host)}:#{fetch(:app_server_port)}"%>", :backlog => 2048

timeout <%= fetch(:app_server_timeout, 60) %>

working_directory "<%=current_path%>"

pid "<%="#{shared_path}/pids/unicorn.pid"%>"
stderr_path "<%="#{shared_path}/log/unicorn.stderr.log"%>"
stdout_path "<%="#{shared_path}/log/unicorn.stdout.log"%>"

preload_app true

GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

before_fork do |server, worker|
  # Close connections on the master process if ActiveRecord is loaded
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  old_pid = "#{server.config[:pid]}.oldbin"

  if File.exists?(old_pid) && server.pid != old_pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :TERM : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # Itâ€™s already gone
    end
  end
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end
